import React from 'react'
import classes from './Login.module.css';
function Input(props) {
  const [formIsValid, setFormIsValid] = useState(false);
  // useReducer refer react docs for explanation
  const [emailState, dispatchEmail] = useReducer(emailReducer, {
    value: '',
    isValid: null
  });

  useEffect(() => {
    console.log('EFFECT RUNNING');

    return () => {
      console.log("EFFECT CLEANUP");
    }
  }, [])//this useEffect will get triggered only when we type password
  const [passwordState, dispatchPassword] = useReducer(passwordReducer,
    {
      value: "",
      isValid: null
    })

  const authCtx = useContext(AuthContext)
  const emailChangeHandler = (event) => {
    dispatchEmail({ type: 'USER_INPUT', val: event.target.value })
    setFormIsValid(
      event.target.value.includes('@') && passwordState.isValid
    );
  };

  // object destructuring
  // syntax for object destructuring
  const { isValid: emailIsValid } = emailState//here we are pulling out isValid from the isValid and storung it in a constant variable emailIsValid
  const { isValid: passwordIsValid } = passwordState
  useEffect(() => {
    const identifier = setTimeout(() => {
      console.log('Checking form validity');
      console.log(emailState);
      console.log(passwordState);
      // by using setTimeout we can decide after how much time the function get displayed on the console or rerendered

      setFormIsValid(
        emailIsValid && passwordIsValid
      );
    }, 1000)//the function will be rendered in every 1000ms
    return () => {
      console.log('CLEAN UP');//cleanup fucntion runs before the actual function executes or re renders
      // if the the renders for the first  time then we say it is mounting
      // if the the renders for the first  time then we say it is mounting
      clearTimeout(identifier);
    }//cleanup function
  }, [emailIsValid, passwordIsValid])

  const passwordChangeHandler = (event) => {
    dispatchPassword({ type: 'USER_INPUT', val: event.target.value })
    setFormIsValid(
      emailState.isValid && event.target.value.trim().length > 6);
  };

  const validateEmailHandler = () => {
    dispatchEmail({ type: 'INPUT_BLUR' })
  };

  const validatePasswordHandler = () => {
    dispatchPassword({ type: 'INPUT_BLUr' })
  };

  const submitHandler = (event) => {
    event.preventDefault();
    authCtx.onLogin(emailState.value, passwordState.value);
  };
  return (
    <div>
      <div
        className={`${classes.control} ${emailState.isValid === false ? classes.invalid : ''
          }`}
      >
        <label htmlFor="email">E-Mail</label>
        <input
          type="email"
          id="email"
          value={emailState.value}
          onChange={emailChangeHandler}
          onBlur={validateEmailHandler}
        />
      </div>
      <div
        className={`${classes.control} ${passwordState.isValid === false ? classes.invalid : ''
          }`}
      >
        <label htmlFor="password">Password</label>
        <input
          type="password"
          id="password"
          value={passwordState.value}
          onChange={passwordChangeHandler}
          onBlur={validatePasswordHandler}
        />
      </div>
    </div>
  )
}

export default Input
